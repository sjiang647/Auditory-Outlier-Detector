%% Experiment 5: Auditory Outlier Detection

clear all;
close all;
clc;

<<<<<<< HEAD
outlierRange = 0;
toneLength = 0;
tonePause = 0;

window_w = rect(3);
toneLength = 0.2;
tonePause = 0.1;
toneFrequency = 0;
=======
%% General Setups (vars, tone ramp, screen, etc.)

% Screen('Preference', 'SkipSyncTests', 1);
% [window, rect] = Screen('OpenWindow', 0);
% Screen('BlendFunction', window, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
% HideCursor();
rng('shuffle');

numTrial = 10;
outlierRange = [6 10 14 16];
outlierPos = 1;
toneLength = 0.2;
tonePause = 0.1;
>>>>>>> 47140f0d07a7e526d26dc533bdfb298ce573c135
trialPause = 0.5;
toneRange = [2 4 6];
meanPos = 1;
tones = [];
data = {};
subjectData = {};

%% Input subject name & save

inputWindow = inputdlg({'Name','Gender','Age'},...
              'Customer', [1 50; 1 12; 1 7]);
          
% int = input('Participant Initial: ','s');
% nameID = upper(int);
% 
% if ~isdir([current, '/Participant_Data/', nameID])
%     mkdir([current, '/Participant_Data/', nameID]);
% end
<<<<<<< HEAD
=======

%% Tuning sound (Convert Hz to MIDI semitones)
>>>>>>> 47140f0d07a7e526d26dc533bdfb298ce573c135

%% Tuning sound (Convert Hz to MIDI semitones)
myTone = sin(2*pi* frequency * toneLength);
%% Task instructions 
%     Screen('DrawText', window, 'You will listen to 7 audio tones. 1 tone is an outlier. If the outlier is a higher tone, press the ?H? key. If the outlier is a lower tone, press the ?L? key.', x1, y1-25);
%     Screen('Flip',window);  
%% Counterbalancing 
highlow = mod(randperm(numTrial), 2);%1 if high, 0 if low
outlierDiff = mod(randperm(numTrial), 4) + 1;
for i = 1:length(outlierDiff)
    if outlierDiff(i) == 1
    elseif outlierDiff(i) == 2
        
    end
end 
outlierPos = mod(randperm(numTrial), 7) + 1;
counterbalance = [highlow;outlierDiff;outlierPos];


%% Actual experiment 

%% Asking whether high or low

%% Saving response

%% Repeat #6-#8 nIter times 

%% Save result

